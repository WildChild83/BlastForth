( ---------------------------------------------------------------------------- )
( **************************************************************************** )
(       Memory Heap                                                            )
( **************************************************************************** )
( ---------------------------------------------------------------------------- )

( ---------------------------------------------------------------------------- )
(                                                                              )
(       Dependencies:                                                          )
(           - 68k.fs                                                           )
(           - forth.fs                                                         )
(           - core.fs                                                          )
(                                                                              )
( ---------------------------------------------------------------------------- )
Forth definitions

( ---------------------------------------------------------------------------- )
alignram 0 buffer: pad

( ---------------------------------------------------------------------------- )
variable (nodeptr)

code ramaddr ( haddr -- addr ) -1 # d1 move, tos d1 h move, d1 tos move, next

: nodesize ( node -- u )     h@ ;
: nextnode ( node -- node' ) half+ h@ ramaddr ;

: .node ( node -- )
    ." a=" dup $FFFF and hex.
    ." n=" dup half+ h@  hex.
    ." s=" h@ . ;

: init-memory ( -- )
    $10000 pad $FFFF and - 16rotate $FFFC + (nodeptr) !
    (nodeptr) nextnode off ;

( ---------------------------------------------------------------------------- )
: allocate ( u -- addr )
    half+ (nodeptr) begin dup nodesize third u< while nextnode repeat ( u this )
    dup third - third over h! >r ( u this ) ( R: addr )
    
    
    
    dup third - third over half- h! >r ( u this ) ( R: addr )
    dup nodesize rot - half- over h! ( this ) ( R: addr )
    r@ half- swap half+ h! r> ;

( ---------------------------------------------------------------------------- )
( ---------------------------------------------------------------------------- )
( ---------------------------------------------------------------------------- )
( ---------------------------------------------------------------------------- )
( ---------------------------------------------------------------------------- )
( ---------------------------------------------------------------------------- )
( ---------------------------------------------------------------------------- )
( ---------------------------------------------------------------------------- )
( ---------------------------------------------------------------------------- )















